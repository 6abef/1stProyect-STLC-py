expression : variable                                  ... (YA)
    | literal                                          ... (YA)
    | "(" expression expression ")"
    |"\" variable "->"  expression                     ... (YA)
    | "(" expression operator expression ")"
    | "if" expression "then" expression "else" expression
    | "(" expression ":" type ")"

(YA) variable_character : "a" | ... | "z" | "A" | ... | "Z"
(YA) variable : "_" variable_character+ | variable_character+

(YA) literal : bool_literal | int_literal | "unit"

(YA)unitExp = "unit"

(YA)bool_literal : True | False

(YA) int_literal : 0 | 1 | -1 | 2 | -2 | ...         

(YA) operator: "+" | "-" | "*" | "/" | "<" | ">" | "<=" | ">=" | "==" | "&" | "|" |"~"

type : "Bool" | "Int" | "Unit" | "(" type "->" type ")" #FALTA!!

variable_definition : variable "=" expression
variable_declaration : variable ":" type



lexers necesarios:
- variable ............... (YA)
- entero   ............... (YA)
- operador ............... (YA)
- bool     ............... (YA)
- unit     ............... (YA)
- parentesis izq/der ..... (YA)
- flecha   ............... (YA)
- lambda   ............... (YA)
- two points ............. (YA)
- if..then   ............. (YA)
- equals     ............. (YA)
- tipos      ............. (YA)
- literal    ............. (YA)
- ErrorToken ............. (YA)

Parser: 

- expresiones (parentesis , parentesis&operador, if,then , lambda)
- variable_declaration (con y sin parentesis)
- variable_definition

ExpressionVariable
ExpressionLiteral
ExpressionApplication
ExpressionLambda
ExpressionOperator
ExpressionOperation
ExpressionIf
ExpressionType
ExpressionDeclaration